name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Python SDK Build & Test
  python-sdk:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        working-directory: sdk/python
        run: |
          pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Lint with ruff
        working-directory: sdk/python
        run: ruff check genai_otel/

      - name: Format check with black
        working-directory: sdk/python
        run: black --check genai_otel/

      - name: Type check with mypy
        working-directory: sdk/python
        run: mypy genai_otel/

      - name: Run tests
        working-directory: sdk/python
        run: pytest --cov=genai_otel --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: sdk/python/coverage.xml
          flags: python-sdk

  # Node.js SDK Build & Test
  nodejs-sdk:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16', '18', '20']

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        working-directory: sdk/nodejs
        run: npm ci

      - name: Lint
        working-directory: sdk/nodejs
        run: npm run lint

      - name: Build
        working-directory: sdk/nodejs
        run: npm run build

      - name: Run tests
        working-directory: sdk/nodejs
        run: npm test

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner (Filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/typescript

      - name: Run Bandit (Python security)
        run: |
          pip install bandit
          bandit -r sdk/python/genai_otel -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            bandit-report.json

  # Build and Push Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [python-sdk, nodejs-sdk, security-scan]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      id-token: write  # For Cosign signing

    steps:
      - uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-push.outputs.digest }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-push.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Attach SBOM to image
        run: |
          cosign attach sbom --sbom sbom.spdx.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-push.outputs.digest }}

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Helm Chart Linting & Testing
  helm-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.0

      - name: Lint Helm chart
        run: |
          helm lint deploy/helm

      - name: Update dependencies
        run: |
          cd deploy/helm
          helm dependency update

      - name: Template chart
        run: |
          helm template genai-obs deploy/helm \
            --values deploy/helm/values.yaml \
            --debug

      - name: Install chart-testing
        uses: helm/chart-testing-action@v2

      - name: Run chart-testing (lint)
        run: ct lint --config .github/ct.yaml

  # Deploy to staging (on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, helm-test]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - uses: actions/checkout@v5

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install genai-obs deploy/helm \
            --namespace genai-observability \
            --create-namespace \
            --values deploy/helm/values-staging.yaml \
            --set image.tag=${{ github.sha }} \
            --wait

  # Publish packages (on release)
  publish:
    runs-on: ubuntu-latest
    needs: [python-sdk, nodejs-sdk, security-scan]
    if: github.event_name == 'release'
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build Python package
        working-directory: sdk/python
        run: |
          pip install build
          python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: sdk/python/dist/
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        working-directory: sdk/nodejs
        run: |
          npm ci
          npm run build
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Package Helm chart
        run: |
          helm package deploy/helm
          helm repo index . --url https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}

      - name: Upload Helm chart to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            genai-observability-*.tgz
            index.yaml

  # Generate documentation
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Sphinx
        run: |
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints

      - name: Build docs
        run: |
          cd docs
          make html

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
